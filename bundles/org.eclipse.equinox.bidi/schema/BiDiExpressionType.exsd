<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.equinox.bidi" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.equinox.bidi" id="bidiType" name="Add new complex expression type"/>
      </appInfo>
      <documentation>
         This extension point provides guidelines about adding a new type of complex expression.  Basically, such a new type is an extension of the ComplExpBasic class which specifies specific operators and, optionally, a number of special cases to handle.
&lt;br&gt;
See the javadoc for ComplExpBasic for explanations about constructors of ComplExpBasic and methods that an extension might override.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appInfo>
            <meta.element />
         </appInfo>
      </annotation>
      <complexType>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.6
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Here is a most basic example.
&lt;p&gt;
&lt;pre&gt;
/*
* ComplExpSepMinus
*/

package example.complexpType;

import org.eclipse.equinox.bidi.*;

/**
 *  &lt;code&gt;ComplExpSepMinus&lt;/code&gt; is a processor for complex expressions
 *  composed of text segments separated by minus signs.
 *
 */
public class ComplExpSepMinus extends ComplExpBasic
{
    /**
     *  Constructor for a complex expressions processor with support for
     *  minus delimiters.
     *
     */
    public ComplExpSepMinus()
    {
        super(&quot;-&quot;);
    }
}
&lt;/pre&gt;
&lt;p&gt;
In the plug-in org.eclipse.equinox.bidi, the classes CompExpDelims, ComplExpDelimsEsc, ComplExpJava, ComplExpRegex, ComplExpSingle, ComplExpSql may be used as examples of extensions for ComplExpBasic.
&lt;p&gt;
Start with the very simple ComplExpSingle, then ComplExpDelims, ComplExpDelimsEsc, then all the rest.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiinfo"/>
      </appInfo>
      <documentation>
         TBD
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         All the classes mentioned as Examples
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2010 IBM Corporation and others.&lt;br&gt;
All rights reserved. This program and the accompanying materials are made 
available under the terms of the Eclipse Public License v1.0 which 
accompanies 
this distribution, and is available at 
&lt;a 
href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;

      </documentation>
   </annotation>

</schema>
